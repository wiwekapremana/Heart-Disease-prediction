# -*- coding: utf-8 -*-
"""Proyek Pertama MLT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sSlEYsfIXythEFCl3FW48yoxDBhoOG3g

#Nama : Komang Wiweka Premana
##Dataset : https://www.kaggle.com/johnsmith88/heart-disease-dataset

# Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from google.colab import files
from sklearn.model_selection import GridSearchCV
from sklearn.feature_selection import VarianceThreshold
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import StandardScaler, MinMaxScaler,RobustScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier  
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,classification_report
from sklearn.metrics import confusion_matrix
import warnings
warnings.filterwarnings("ignore")

"""#Import Data"""

! pip install -q kaggle
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d johnsmith88/heart-disease-dataset
!unzip /content/heart-disease-dataset.zip

heart = pd.read_csv('/content/heart.csv')
heart

heart.head()

heart.columns

heart.describe()

heart.shape

"""# Data Information
* age:- Usia pasien

* sex:- Jenis kelamin pasien (1 = 'Laki laki' and 0 = 'perempuan')

* cp:- cp adalah singkatan dari chest pain. Dalam dataset ini, ada empat jenis nyeri dada (0=asimtomatik, 1= angina tipikal, 2=angina atipikal, 3=nyeri non-angina)

* trestbps:- Resting blood pressure(in mm hg on admission to the hospital)

* chol:- Serum kolestrol dalam mg/dl

* fbs:- Gula darah>120mg/dl (1=true, 0=false)

* restecg:-Hasil elektrokardiografi (0=normal, 1=having ST-T wave normality, 2=hypertrophy)

* thalachh:- Detak jantung maksimum

* exang:-  latihan angina yang diinduksi (1=yes, 0=no)

* oldpeak:- Depresi ST yang diinduksi oleh olahraga relatif terhadap istirahat

* slope:- Kemiringan segmen ST latihan(0= dowmsloping, 1=flat, 2=upsloping)

* ca: -jumlah dari major vessels(0-3) coloured by flourosopy)

* thal:-Kelainan darah(1=fixed defect, 2=normal, 3=reversable defect)

* target:- target variable dan predicted attribute(0=less chance of heart attack, 1=high rate of heart attack)
"""

heart.info()

heart.isnull().sum()

"""Karena semua data tidak ada yang kosong, jadi tidak perlu melakukan cleanup

## Mengecek keseimbangan data
"""

ax= px.pie(heart['target'], names= "target",title= "target")
ax.show()

"""Berdasarkan diagram diatas dapat dilihat bahwa target variable dengan value 1 lebih besar dari value 0

# EDA
"""

columns=['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',
       'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']
fig, ax1 = plt.subplots(7,2, figsize=(20,25))
k = 0
for i in range(7):
    for j in range(2):
            sns.distplot(heart[columns[k]], ax = ax1[i][j], color = 'blue')
            k += 1
plt.show()

"""Berdasarkan diagram diatas ternyata masih banyak kolom yang memiliki kemiringingan yang tinggi atau tidak seimbang"""

plt.figure(figsize=(20,6))
sns.distplot(heart["age"],color="blue",bins="auto")
plt.title("age")
plt.show()

"""Berdasarkan diagram diatas bahwa pasien yang memiliki umur 55-60 lebih rentan terkena penyakit gagal jantung """

ax= px.pie(heart['sex'], names= "sex",title= "Perbandingan Kasus Penyakit Jantung Berdasarkan Gender")
ax.show()

"""Berdasarkan diagram diatas dapat dilihat bahwa jenis kelamin laki laki lebih banyak yang terkena penyakit serangan jantung sebanyak 69.6%"""

gender1 = heart[heart['sex'] == 1].reset_index()
gender0 = heart[heart['sex'] == 0].reset_index()

ax = px.pie(gender1, names ='target',title= "Tingkat Kematian 1 (Laki Laki)")
ax.show()

ax = px.pie(gender0,names = "target",title="Tingkat Kematian 0 (Perempuan)")
ax.show()

"""Berdasarkan hasil analisis daiatas dapat disimpulkan bahwa Jenis (Perempuan) memiliki tingkat kematian yang tinggi sebanyak 72.4% dibandingkan dengan laki sebanyak 57.9%"""

columns=['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',
       'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']
fig, ax1 = plt.subplots(7,2, figsize=(20,25))
k = 0
for i in range(7):
    for j in range(2):
            sns.boxplot(heart[columns[k]], ax = ax1[i][j], color = 'blue',width = 0.5)
            k += 1
plt.show()

"""Dapat dilihat bahwa terdapat outliers di features kita

# Data Pre-Processing
"""

corr = heart.corr()

plt.figure(figsize=(16,8))
sns.heatmap(corr, cmap = 'Blues', annot=True)
plt.show()

corr['target']

"""Kita dapat melihat bahwa yang memiliki korelasi terendah dengan 'target'  adalah 'fbs' dan 'chol' sedangkan 'oldpeak' dan 'exang' memiliki korelasi negatif yang paling kuat. Untuk korelasi positif yang paling tinggi adalah 'cp', dan 'thalach'.

# Outliers

Outliers:
Outlier pada data ini cukup besar dan tentunya ini dapat mempengaruhi dalam mengukur prediksi suatu data

IQR(inter quartile range):
merupakan ukuran variabilitas yang didasarkan pada pembagian kumpulan data menjadi kuartil. Kuartil membagi kumpulan data terurut menjadi empat bagian yang sama besar. Nilai yang memisahkan bagian-bagian ini disebut kuartil pertama, kedua (median), dan ketiga yang masing-masing dilambangkan dengan Q1, Q2, dan Q3

- cari Q1,Q2,Q3
- Mencari IQR = Q3 - Q1
- Multiply IQR dengan 1.5
- Kurangi angka ini dari Q1 dan tambahkan angka ini ke Q3
- Jika titik terletak pada rentang yang diperoleh di atas maka itu bukan outlier, jika tidak maka itu adalah outlier.
"""

# Q1 
q1 = heart.quantile(0.25)
# Q3
q3 = heart.quantile(0.75)
# IQR
IQR = q3 - q1
# Outlier range
upper = q3 + IQR * 1.5
lower = q1 - IQR * 1.5
upper_dict = dict(upper)
lower_dict = dict(lower)

for i,v in heart.items():
    v_col = v[( v<= lower_dict[i]) | (v >= upper_dict[i])]
    perc = np.shape(v_col)[0] * 100.0 / np.shape(heart)[0]
    print("Column {} outliers = {} => {}%".format(i,len(v_col),round((perc),3)))

"""Kita memiliki kolom ca, chol, trestbps yang memiliki sejumlah outlier

### Karena dataset sudah kecil , saya tidak akan mengatasinya dengan menghapus outlier melainkan saya akan menggantinya dengan batas atas atau bawah yang dapat diterima.
"""

heart['trestbps'].replace(list(heart[heart['trestbps'] > upper_dict['trestbps']].trestbps) ,upper_dict['trestbps'],inplace=True)
heart['chol'].replace(list(heart[heart['chol'] > upper_dict['chol']].chol) ,upper_dict['chol'],inplace=True)
heart['ca'].replace(list(heart[heart['ca'] > upper_dict['ca']].ca) ,upper_dict['ca'],inplace=True)

heart['trestbps'].replace(list(heart[heart['trestbps'] < lower_dict['trestbps']].trestbps) ,lower_dict['trestbps'],inplace=True)
heart['chol'].replace(list(heart[heart['chol'] < lower_dict['chol']].chol) ,lower_dict['chol'],inplace=True)
heart['ca'].replace(list(heart[heart['ca'] < lower_dict['ca']].ca) ,lower_dict['ca'],inplace=True)

"""# Train Test Split"""

scaler = RobustScaler()
robust_df = scaler.fit_transform(heart.iloc[:,:13])
robust_df = pd.DataFrame(robust_df, columns=['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',
       'exang', 'oldpeak', 'slope', 'ca', 'thal'])
robust_df

X = robust_df.values
Y = heart['target'].values
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)
# Normalisasi Data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""# Logistic Regression"""

model_LG = LogisticRegression(random_state=0)
model_LG.fit(X_train,Y_train)
lr_predict = model_LG.predict(X_test)
model_LG_accuracy=round(accuracy_score(Y_test,lr_predict), 4)*100 # Accuracy
print(classification_report(Y_test,lr_predict))

lr_score = accuracy_score(Y_test, lr_predict)
print("Nilai Akurasi Logistic Regression: ", lr_score)

"""# KNN"""

model_KNN = KNeighborsClassifier(n_neighbors=7)
model_KNN.fit(X_train,Y_train)
knn_predict = model_KNN.predict(X_test)
model_KNN_accuracy=round(accuracy_score(Y_test,knn_predict), 4)*100
print(classification_report(Y_test,knn_predict))

knn_score= accuracy_score(Y_test,knn_predict)
print("Nilai Akurasi KNN: ", knn_score)

"""# Random Forest Classifier"""

model_RF = RandomForestClassifier(n_estimators = 100, random_state = 0)  
model_RF.fit(X_train, Y_train)  
rf_predicted = model_RF.predict(X_test)
print(classification_report(Y_test,rf_predicted))

rf_score = accuracy_score(Y_test,rf_predicted)
print("Nilai Akurasi Random Forest: ", rf_score)

"""#Kesimpulan"""

models = pd.DataFrame({
    'Model' : ['Logistic Regression', 'KNN', 'Random Forest Classifier'],
    'Score Accuracy' : [ lr_score, knn_score, rf_score]
})
models.sort_values(by = 'Score Accuracy', ascending = False)

px.bar(data_frame = models, x = 'Model', y = 'Score Accuracy', color = 'Score Accuracy',  title = 'Perbandingan Score Accuracy Setiap Model')

"""Dari sini kita dapat menyimpulkan bahwa model yang lebih akurat dalam memprediksi serangan jantung pada seseorang adalah dengan menggunakan model Random Forest Regression dimana pada model ini memiliki accuracy tertinggi pada f1-score yaitu 100%."""